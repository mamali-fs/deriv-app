name: Deriv App ID Generator

on:
    issue_comment:
        types: [edited]

jobs:
    generate_app_id:
        timeout-minutes: 5
        runs-on: ubuntu-latest
        steps:
            - name: Capture Vercel preview URL
              id: vercel_preview_url
              uses: aaron-binary/vercel-preview-url-action@v0.0.2
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Generate Deriv App ID for deployment Preview URL
              id: generate_app_id
              uses: aaron-binary/deriv-app-id-action@v0.0.4
              with:
                  DERIV_API_TOKEN: ${{ secrets.DERIV_API_TOKEN }}
                  DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  max_retries: 5
                  vercel_preview_url: ${{ steps.vercel_preview_url.outputs.vercel_preview_url }}
            - name: Comment on pull request with App ID and URLs
              id: sticky_comment_on_pr
              if: steps.generate_app_id.outputs.should_post_comment
              uses: marocchino/sticky-pull-request-comment@v1
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  header: deriv-app-id-action
                  number: ${{github.event.issue.number}}
                  message: |
                      A production App ID was automatically generated for this PR. ([log](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}))

                      - **PR**: [${{ steps.generate_app_id.outputs.pr_url }}](${{ steps.generate_app_id.outputs.pr_url }})
                      - **URLs**:
                          - **URL w/ App ID + Server**: [${{ steps.vercel_preview_url.outputs.vercel_preview_url }}](${{ steps.vercel_preview_url.outputs.vercel_preview_url }}?qa_server=frontend.binaryws.com&app_id=${{ steps.generate_app_id.outputs.app_id }})
                          - **Original URL**: [${{ steps.vercel_preview_url.outputs.vercel_preview_url }}](${{ steps.vercel_preview_url.outputs.vercel_preview_url }})
                      - **App ID**: `${{ steps.generate_app_id.outputs.app_id }}`

                      <details>
                        <summary>Copy/paste snippet</summary>

                        ```
                        - **PR**: [${{ steps.generate_app_id.outputs.pr_url }}](${{ steps.generate_app_id.outputs.pr_url }})
                        - **URLs**:
                            - **URL w/ App ID + Server**: [${{ steps.vercel_preview_url.outputs.vercel_preview_url }}](${{ steps.vercel_preview_url.outputs.vercel_preview_url }}?qa_server=frontend.binaryws.com&app_id=${{ steps.generate_app_id.outputs.app_id }})
                            - **Original URL**: [${{ steps.vercel_preview_url.outputs.vercel_preview_url }}](${{ steps.vercel_preview_url.outputs.vercel_preview_url }})
                        - **App ID**: `${{ steps.generate_app_id.outputs.app_id }}`
                        ```
                      </details>

            - name: Run git checkout
              id: post_sticky_comment_action
              if: steps.generate_app_id.outputs.should_post_comment
              uses: actions/checkout@v2
            - name: setup node
              id: post_sticky_setup_node
              if: steps.generate_app_id.outputs.should_post_comment
              uses: actions/setup-node@v1
            - name: setup playwright
              id: post_sticky_setup_playwright
              if: steps.generate_app_id.outputs.should_post_comment
              uses: microsoft/playwright-github-action@v1
#            - name: post_sticky_setup_cache
#              id: post_sticky_setup_cache
#              if: steps.generate_app_id.outputs.should_post_comment
#              uses: actions/cache@v1
#              with:
#                path: ~/.npm
#                key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#                restore-keys: |
#                  ${{ runner.os }}-node-
#
#              - run: npm ci
#              - run: npm run test:qa
#              env:
#                # configure tests with environment variables
#                FFMPEG_PATH: /usr/bin/ffmpeg # for recording video
#                QAW_ARTIFACT_PATH: ${{ github.workspace }}/artifacts
#                # you can also use GitHub secrets for environment variables
#                # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets
#                # LOGIN_PASSWORD: ${{ secrets.PASSWORD }}
#                VALID_USER: ${{ secrets.VALID_USER }}
#                VALID_PASSWORD: ${{ secrets.VALID_PASSWORD }}
#                HOME_URL: ${{ secrets.HOME_URL }}
#
#            - name: Upload Artifacts
#              if: always()
#              uses: actions/upload-artifact@master
#              with:
#                name: qawolf
#                path: ${{ github.workspace }}/artifacts
